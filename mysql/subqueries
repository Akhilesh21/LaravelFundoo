A MySQL subquery is a query nested within another query such 
as SELECT, INSERT, UPDATE or DELETE. 
In addition, a subquery can be nested inside another subquery

1)employees tables
start

SELECT 
    lastName, firstName
FROM
    employees
WHERE
    officeCode IN (SELECT officeCode
    FROM offices
    WHERE country = 'USA');

end
----------------------------------------------------------------
2)payments tables
subquery with comparison operators
start

SELECT 
    customerNumber, checkNumber, amount
    FROM payments
    WHERE amount = (SELECT MAX(amount) FROM payments);

end
----------------------------------------------------
start

SELECT customerNumber, checkNumber,  amount
FROM payments
WHERE
    amount > (SELECT AVG(amount)
        FROM payments);
end
---------------------------------------------------------------
3)customers
If a subquery returns more than one value, 
we can use other operators such as IN or NOT IN operator 
in the WHERE clause

start

SELECT  customerName
FROM customers
WHERE customerNumber NOT IN (SELECT DISTINCT customerNumber
        FROM orders);

end
----------------------------------------------------------------
4)orderdetails
subquery in the FROM clause
start

SELECT MAX(items), MIN(items),  FLOOR(AVG(items))
FROM
    (SELECT orderNumber, COUNT(orderNumber) AS items
    FROM orderdetails GROUP BY orderNumber) AS lineitems;

end
-------------------------------------------------------------------
5)
corelated subquery means that we can execute the subquery as a
standalone query
start

SELECT orderNumber, 
    COUNT(orderNumber) AS items
FROM orderdetails
GROUP BY orderNumber;

end
-----------------------------------------------------------------
6)
select products whose buy prices are greater 
than the average buy price of all products 
in each product line
start

 SELECT productName, buyPrice FROM products p1
    where buyprice > (SELECT AVG(buyprice) 
    FROM products WHERE productline = p1.productline);

end
-------------------------------------------------------------------

7)When a subquery is used with the EXISTS or NOT EXISTS operator
start

SELECT orderNumber, SUM(priceEach * quantityOrdered) total
FROM orderdetails INNER JOIN orders USING (orderNumber)
GROUP BY orderNumber
HAVING SUM(priceEach * quantityOrdered) > 60000;

end
--------------------------------------------------------
start

SELECT customerNumber, customerName
FROM customers
WHERE EXISTS( SELECT  orderNumber, SUM(priceEach * quantityOrdered)
FROM orderdetails INNER JOIN orders USING (orderNumber)
WHERE customerNumber = customers.customerNumber
GROUP BY orderNumber HAVING SUM(priceEach * quantityOrdered) > 60000);

end